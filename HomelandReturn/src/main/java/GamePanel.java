
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Ellipse2D;
import java.util.Timer;
import java.util.TimerTask;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author evgen
 */
public class GamePanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form MainPanel
     */
    
    static int tmpX = 0; static int tmpY = 0; static double a = 0; static int radius = 25; static double d = 0; static double a2 = 0; static double d2 = 0;
    
    public GamePanel() {
        initComponents();
        setBackground(Color.WHITE);
        addKeyListener(this);
        
        startTimer();
    }

    @Override
    public void paintComponent(Graphics g) {
        repaint();
        super.paintComponent(g);
        g.setColor(Color.BLACK);
        
        Player.paintComponent(g);
        World.paintComponent(g);
        
        if (Main.loading) {
            a2 += 0.01;
            a = Math.toRadians(d + 90) + Math.sin(a2) * 3*Math.PI;

            tmpX = Math.round((float) (radius*2 + Math.cos(a) * radius));
            tmpY = Math.round((float) (radius*2 + Math.sin(a) * radius));

            Graphics2D g2 = (Graphics2D) g;
            g.setColor(Color.GRAY);
            g2.draw(new Ellipse2D.Double(radius + 9, radius + 9, radius*2, radius*2));
            g.setColor(Color.BLACK);
            g2.fill(new Ellipse2D.Double(tmpX, tmpY, 15, 15));
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1920, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1080, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_A) {
            World.dir = -Player.speed;
        }
        if (e.getKeyCode() == KeyEvent.VK_D) {
            World.dir = Player.speed;
        }
        if (e.getKeyCode() == KeyEvent.VK_W) {
            World.jump();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_A || e.getKeyCode() == KeyEvent.VK_D) {
            World.dir = 0;
        }
    }

    public void startTimer() {
        new Timer().schedule(new TimerTask(){
            @Override
            public void run() {
                requestFocus();
            }
        }, 100, 1);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
